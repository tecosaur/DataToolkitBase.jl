#+title: The Data REPL

* General design

An extensible "Data REPL" is provided to make directly interacting with the
=Data.toml= a bit more convenient. It can be entered by pressing =}= on an empty
=julia>= REPL line.

#+begin_example
julia> # type }
data>
data> help
 Command  Action
 ───────────────────────────────────────────────────────────
 help     Display help information on the available commands
#+end_example

The foremost data collection is also listed in the prompt in much the same
manner as =(environment) pkg>=, i.e.

#+begin_example
(⋅) data>        # No currently loaded data collections
(example) data>  # The top data collection is "example"
#+end_example

Commands (and sub-commands) can be triggered by typing them out in full (i.e.
=cmd args...=) but also abbreviated up to the unique stem. For instance if =cmd= is
the only command starting with =c=, then it can be called with any of
+ =data> cmd args...=
+ =data> cm args...=
+ =data> c args...=
However, should a command =conflict= also exist, then =c= is no longer a unique stem
and so =c args...= will produce an error message like so:

#+begin_example
data> c args...
 ! Multiple matching Data REPL commands: cmd, conflict
#+end_example

* The help command

=help= is implemented specially in the Data REPL. It can be invoked normally (i.e.
=help cmd=) but also with =?= prefix (i.e. =?cmd=). Furthermore, all commands with
sub-commands with automatically have a =help= sub-command added. Overall, =help=
supports the following usage patterns.

#+begin_example
data> help             # List available commands.
data> help cmd         # Obtain the help for cmd, or
data> help cmd         # list available sub-command (if applicable).
data> ?cmd             # Obtain the help for cmd.
data> help cmd subcmd  # Obtain the help for subcmd.
data> ?cmd subcmd      # Obtain the help for subcmd.
data> cmd help subcmd  # Obtain the help for subcmd.
data> cmd ?subcmd      # Obtain the help for subcmd.
#+end_example

* Extending the Data REPL
** Registering commands

To register a command, one simply needs to push a ~ReplCmd~ onto ~REPL_CMDS~.

#+begin_src @docs
REPL_CMDS
#+end_src

#+begin_src @docs
ReplCmd
#+end_src

** Completion

As hinted by the ~ReplCmd~ docstring, completions can be implemented by
implementing ~completions(::ReplCmd{:CMD_ID}, sofar::AbstractString)~ or
~allcompletions~.

#+begin_src @docs
completions
#+end_src

#+begin_src @docs
allcompletions
#+end_src

** Helper functions

To create a pleasant user interface, a number of utility functions are provided.

#+begin_src @docs
prompt
#+end_src

#+begin_src @docs
prompt_char
#+end_src

#+begin_src @docs
confirm_yn
#+end_src

#+begin_src @docs
peelword
#+end_src
